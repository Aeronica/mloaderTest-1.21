plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

if (project.hasProperty('modmenu_version')) {
    repositories { RepositoryHandler handler -> {
        limitedMaven(handler, 'https://maven.terraformersmc.com/', 'com.terraformersmc')
    }}

    dependencies {
        modRuntimeOnly("com.terraformersmc:modmenu:${project.findProperty('modmenu_version')}")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation group: 'net.darkhax.bookshelf', name: 'bookshelf-fabric-1.21.1', version: bookshelf_version
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

void limitedMaven(RepositoryHandler handler, String url, String... groups) {
    handler.exclusiveContent {
        it.forRepositories(handler.maven {
            setUrl(url)
        })
        it.filter { f ->
            for (def group : groups) {
                f.includeGroup(group)
            }
        }
    }
}